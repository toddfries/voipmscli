#!/usr/bin/perl

# Copyright (c) 2016 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Data::Dumper;
use VOIP::MS;

my ($user,$pass);
my $d;
my $conffile=$ENV{'HOME'}."/.voipms.conf";
my $config = { };
if (-f $conffile) {
	if (!open(CF,"$conffile")) {
		print "open of $conffile failed, aborting\n";
		exit(1);
	}
	my $line;
	while(<CF>) {
		chomp($line = $_);
		if ($line =~ /^([a-zA-Z][a-zA-Z_0-9]*)\s*=\s*(.*)$/) {
			my ($var, $val) = ($1,$2);
			$config->{$var} = $val;
			printf "config: '%s' = '%s'\n",$var,$val;
		}
	}
}
if (!defined($config->{user}) || !defined($config->{pass})) {
	print "User or Pass is Null and void, bailing for now\n";
	exit(1);
}
my $voip = VOIP::MS->new(username => $config->{user},
	password => $config->{pass});
my $balinfo= $voip->getBalance();
printf "Balance = %0.8f\n", $balinfo;

# the following 'if (0)' bits work, they're just verbose; enable if desired
# this is a wip anyway, will get re-done once enough apis are implemented
if (0) {
my $cdr = $voip->getCDR( { date_from => '2016-08-01', date_to => '2016-09-01'} );
$d = Data::Dumper->new([$cdr]);
print $d->Dump();
}

if (0) {
my $slist = $voip->getServersInfo(); # optional: server_pop => 1
$d = Data::Dumper->new([$slist]);
print $d->Dump();
}

if (0) {
  my $tret = $voip->getInternationalTypes();
  foreach my $it (@$tret) {
    printf "%12s %s\n", $it->{value}, $it->{description};
    my $ret = $voip->getDIDCountries(type => $it->{value});
    my $i=0;
    foreach my $ctry (@$ret) {
	if ($ctry->{value} eq $ctry->{description}) {
		$ctry->{description} = "";
	}
	printf "%2d. %12s %s\n", $i++, $ctry->{value}, $ctry->{description};
	if ($ctry->{value} eq "all") {
		next;
	}
	my $r;
	eval {
	$r = $voip->getDIDsInternationalGeographic(
	    country_id => $ctry->{value});
	$d = Data::Dumper->new([$r]);
	print "International Geographic:\n";
	print $d->Dump();
	};
	if ($@) {
		print $@;
	}

	eval {
	$r = $voip->getDIDsInternationalNational(
	    country_id => $ctry->{value});
	$d = Data::Dumper->new([$r]);
	print "International National:\n";
	print $d->Dump();
	};
	if ($@) {
		print $@;
	}

	eval {
	$r = $voip->getDIDsInternationalTollFree(
	    country_id => $ctry->{value});
	$d = Data::Dumper->new([$r]);
	print "International TollFree:\n";
	print $d->Dump();
	};
	if ($@) {
		print $@;
	}
    }
  }
}
if (0) {
my $ret = $voip->getCallAccounts(); # optional: client => 56115
my $i=0;
foreach my $acct (@$ret) {
	if ($acct->{value} eq $acct->{description}) {
		$acct->{description} = "";
	}
	printf "%2d. %12s %s\n", $i++, $acct->{value}, $acct->{description};
	if ($acct->{value} eq "all") {
		next;
	}
	my $r = $voip->getRegistrationStatus(account => $acct->{value});
	$d = Data::Dumper->new([$r]);
	print $d->Dump();
}
}
	
if (0) {
my $ret = $voip->getCallBilling();
$d = Data::Dumper->new([$ret]);
print $d->Dump();
}
if (0) {
my $ret = $voip->getCallTypes(); # optional: client => 56115
$d = Data::Dumper->new([$ret]);
print $d->Dump();
}
if (0) {
my $ret = $voip->getRegistrationStatus(account => $config->{account0});
$d = Data::Dumper->new([$ret]);
print $d->Dump();
}
if (0) { # hmmm, what is a callback exactly?
my $cb = { };
$cb->{description} = 'testing 1 2 3';
$cb->{number} = '14057791633';
$cb->{delay_before} = '30';
$cb->{response_timeout} = '30';
$cb->{digit_timeout} = '5';
# optional
$cb->{callerid_number} = '14058267307';
my $cdr = $voip->setCallback( $cb );
$d = Data::Dumper->new([$cdr]);
print $d->Dump();
}
if (0) { # how to create a package?
my $ret = $voip->getPackages(); # optional: package => 8378
$d = Data::Dumper->new([$ret]);
print $d->Dump();
}

if (0) {
# optional: client => '' || '5615' || '5615_VoIP'
# optional: did => 1231231234
my $ret = $voip->getDIDsInfo();
$d = Data::Dumper->new([$ret]);
print $d->Dump();
}

if (0) {
my %p;
$p{did} = $config->{mySMSdid};
$p{dst} = $config->{mySMSdst};
$p{message} = 'testing 1 2 3½¹°';
my $did = $config->{mySMSdid};
my $dst = $config->{mySMSdst};
printf "did='%s', dst='%s'\n", $did, $dst;
my $ret = $voip->sendSMS(
	did => $did,
	dst => $dst,
	message => 'testing 1 2 3½¹°',
);
$d = Data::Dumper->new([$ret]);
print $d->Dump();
}
if (1) {
my $cdr = $voip->getSMS( { from => '2016-08-01', to => '2016-09-01'} );
$d = Data::Dumper->new([$cdr]);
print $d->Dump();
}
